buildscript {
    ext {
        springBootVersion = SPRING_BOOT_VERSION
        springCloudVersion = SPRING_CLOUD_VERSION
        axonFrameworkVersion = AXON_FRAMEWORK_VERSION
    }

    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6-rc1")
    }
}
plugins {
    // 添加插件信息
    id "org.sonarqube" version "2.7"
}
apply plugin: "org.sonarqube"
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
sourceCompatibility = 1.8
sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}

subprojects {
//    # 在subprojects段中添加以下块内容
    sonarqube {
        properties {
//            # 如果同时存在src/main/java与src/main/test，则要按以下方式设置，如果没有单元测试用例目录test，也可以只填写src
            property "sonar.sources", "src/main/java"
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configure(subprojects.findAll {
    !it.name.contains('infrastructure')
}) {
    apply from: "${rootProject.projectDir}/infrastructure/build.gradle"
}


configure(subprojects.findAll {
    !it.name.contains('common-api') && it.name.contains('-api')
}) {
    apply from: "${rootProject.projectDir}/common/build.gradle"
}

dependencies {
    compile project(":common")
    compile project(":query")
    compile project(":web")
    compile project(":user")
    compile project(":admin")
    compile 'ch.qos.logback:logback-core:1.2.3'
    testCompile 'org.freemarker:freemarker:2.3.29'
    testCompile 'junit:junit:4.12'

}
